const middy = require('@middy/core');
const ssm = require('@middy/ssm');
const { getInternal } = require('@middy/util');
const get = require('lodash.get');
const fs = require('fs');
const yaml = require('js-yaml');
const path = require('path');

const SECRET_FILE_NAME = 'secrets.yml';

const getSecretKeys = async () => {
    try {
        console.log(`${process.cwd()}/${SECRET_FILE_NAME}`)
        console.log(path.resolve(__dirname, `../${SECRET_FILE_NAME}`))
        console.log(path.join(__dirname, `../${SECRET_FILE_NAME}`))
        const configFilePath = path.join(__dirname, `../${SECRET_FILE_NAME}`);
        const configFile = fs.readFileSync(configFilePath, 'utf8');
        console.log('>>>>>1>', configFile)
        const config = yaml.load(configFile);
        console.log('>>>>>2>', config)

        const baseSSMPath = get(config, 'env_vars.base_key_path', []);
        const allowedSecretsKeys = get(config, 'env_vars.secrets', []);
        
        const keysMap = {};
        for (const key of allowedSecretsKeys) {
            const ssmKey = `${baseSSMPath}/${key}`;
            keysMap[key] = ssmKey;
        }

        return keysMap;
    } catch (error) {
        return {};
    }
};

const lambdaWrapper = (handler) => {
    const keysMap = getSecretKeys();
    const ssmMiddleware = ssm({
        //cache: true, // Set to true for caching the SSM parameter value
        // fetchData: {
        //     env: '/service/workspace-test/', // Replace this with your actual SSM parameter key
        // },
        fetchData: keysMap,
        //cacheExpiry: 15 * 60 * 1000,
    });

    return middy(handler).use(ssmMiddleware).before(async (request) => {
        const secretKeys = Object.keys(keysMap);
        console.log(secretKeys)
        const data = await getInternal(
            secretKeys,
            request
        );
        console.log('data', data);
        Object.assign(request.context, data)
        // const keys = Object.keys(data.env);
        // for (const key of keys) {
        //     //process.env[key] = awarequest.internal[key];
        //     const value = data.env[key];
        //     process.env[key] = value;
        // }

        for (const key of secretKeys) {
            //process.env[key] = awarequest.internal[key];
            const value = data[key];
            process.env[key] = value;
        }
    });
};

module.exports = {
    lambdaWrapper
};