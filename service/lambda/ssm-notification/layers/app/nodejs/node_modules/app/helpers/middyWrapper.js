const middy = require('app/node_modules/@middy/core');
const ssm = require('app/node_modules/@middy/ssm');
const { getInternal } = require('app/node_modules/@middy/util');

const lambdaWrapper = (handler) => {
    const ssmMiddleware = ssm({
        //cache: true, // Set to true for caching the SSM parameter value
        fetchData: {
            env: '/service/workspace-test/', // Replace this with your actual SSM parameter key
        },
        cacheExpiry: 15 * 60 * 1000,
    });

    return middy(handler).use(ssmMiddleware).before(async (request) => {
        const data = await getInternal(
            ['env'],
            request
        );
        //console.log('data', data);
        Object.assign(request.context, data)
        const keys = Object.keys(data.env);
        for (const key of keys) {
            //process.env[key] = awarequest.internal[key];
            const value = data.env[key];
            process.env[key] = value;
        }
    });
};

module.exports = {
    lambdaWrapper
};