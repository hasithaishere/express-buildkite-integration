const dotenv = require('dotenv');
const moment = require('moment');
// const fs = require('fs');

// const middy = require('app/node_modules/@middy/core');
// const ssm = require('app/node_modules/@middy/ssm');
// const { getInternal } = require('app/node_modules/@middy/util');

const { lambdaWrapper } = require('./helpers/middyWrapper');


// This is a comment ....

dotenv.config({ path: require('path').resolve(__dirname, '.env') });

// const lambdaWrapper = (handler) => {
//     console.log('>>>>2>>>>', fs.readdirSync(process.cwd()).toString())
//     const ssmMiddleware = ssm({
//         //cache: true, // Set to true for caching the SSM parameter value
//         fetchData: {
//             env: process.env.BASE_ENV_KEY_PATH, // Replace this with your actual SSM parameter key
//         },
//         cacheExpiry: 15 * 60 * 1000,
//     });

//     return middy(handler).use(ssmMiddleware).before(async (request) => {
//         // console.log(request.internal)
//         // const keys = Object.keys(request.internal);
//         // for (const key of keys) {
//         //     //process.env[key] = awarequest.internal[key];
//         //     const value = await request.internal[key]();
//         //     console.log('....', value);
//         // }
//         const data = await getInternal(
//             ['env'],
//             request
//         );
//         //console.log('data', data);
//         Object.assign(request.context, data)
//         const keys = Object.keys(data.env);
//         for (const key of keys) {
//             //process.env[key] = awarequest.internal[key];
//             const value = data.env[key];
//             process.env[key] = value;
//         }
//     });
// };


module.exports = {
    moment,
    lambdaWrapper
};
